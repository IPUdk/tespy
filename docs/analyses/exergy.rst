Exergy analysis
===============

Introduction
------------

- Advantages of exergy analysis, what does it enable?
- Fundamentals of exergy ???
- Terminology :cite:`Tsatsaronis2007`
- Spitting exergy :cite:`Morosuk2019`
- Exergy balances of heat exchangers and simple heat exchangers :cite:`Sayadi2019`

- Requirements for this type of analysis
- What restrictions are there currently:

  - physical exergy, therefore no reaction processes
  - T >= T0 tested

Tutorial
--------

- short intro

TESPy model
^^^^^^^^^^^

- Take an example plant -> SEGS
- Quick glance on parameters for TESPy model
- Grouping components

Analysis setup
^^^^^^^^^^^^^^
To perform the exergy analysis, exergy streams leaving or entering the
network's system boundaries have to be defined by the user. These are:

- fuel exergy :code:`E_F`
- product exergy :code:`E_P`
- exergy loss streams :code:`E_L`
- internal exergy streams not bound to connections :code:`internal_busses`

In case of the solar thermal power plant, the fuel exergy is the heat input at
the parabolic trough. The product is the electricity produced by the plant,
i.e. the electricity generated by the turbine generators minus the electricity
cosumed by the pumps and the fan. Lastly, exergy loss streams are the hot air
leaving the cooling tower and the cold air entering the cooling tower fan from
the ambient. Similar to the electricity consumption of the fan and pumps the
cold air will be taken into account as negative value for the total exergy
loss.

.. figure:: api/_images/placeholder.svg
    :align: center
    :alt: Topology of the Soler Energy Generating System (SEGS)

In order to define these values a list of busses representing the individual
exergy streams is passed when creating the ExergyAnalysis instance.

.. code-block:: python

    ean = ExergyAnalysis(
        nw, E_P=[power], E_F=[heat_input_bus], E_L=[exergy_loss_bus])

In this case, the Bus :code:`power` represents the product exergy, the Bus
:code:`heat_input_bus` the fuel exergy of the solar field and the Bus
:code:`exergy_loss_bus` the exergy lost with the hot air leaving the cooling
tower. An example application using the :code:`internal_busses` can be found in
the API documentation of class :py:class:`tespy.tools.analyses.ExergyAnalysis`.


After the setup of the exergy analysis, the
:py:meth:`tespy.tools.analyses.ExergyAnalysis.analyse` method expects the
definition of the ambient state, thus ambient temperature and ambient pressure.
With these information, the analysis is carried out automatically. The value
of the ambient conditions is passed in the network's (:code:`nw`) corresponding
units.

.. code-block:: python

    ean.analyse(pamb=1, Tamb=25)

Using the same :py:class:`tespy.tools.analyses.ExergyAnalysis` instance, it is
possible to run the analysis again with a different ambient state. The data
generated by the analysis will automatically update, e.g. changing the ambient
state temperature value to 15 Â°C.

.. code-block:: python

    ean.analyse(pamb=1, Tamb=15)

If the network's topology changed a new instance of the
:code:`ExergyAnalysis` class needs to be defined.

Checking consistency
^^^^^^^^^^^^^^^^^^^^
An automatic check of consistency is performed by the analysis. The sum of all
exergy destruction values of the network's components and the exergy
destruction on the respective busses is calculated. On top of that, fuel and
product exergy values as well as exergy loss are determined. The total exergy
destruction must therefore be equal to the fuel exergy minus product exergy and
minus exergy loss. The deviation of that equation is then calculated and
checked versus a threshold value of :math:`10^{-3}` (to componesate for
rounding errors).

.. math::

    \dot{E}_\mathrm{D} = \dot{E}_\mathrm{F} - \dot{E}_\mathrm{P} -
    \dot{E}_\mathrm{L}

    \Delta \dot{E} = \dot{E}_\mathrm{F} - \dot{E}_\mathrm{P} -
    \dot{E}_\mathrm{L} - \dot{E}_\mathrm{D}

    \Delta \dot{E} \leq 10^{-3}

.. note::

    An error will be printed to the console, in case the exergy analysis found
    a mismatch in the above equation. That means, the exergy analysis has not
    been set up correctly. You should check, if the definition of the exergy
    streams :code:`E_F`, :code:`E_P`, :code:`E_L` and :code:`internal_busses`
    is correct.

Printing the results is possible with the
:py:meth:`tespy.tools.analyses.ExergyAnalysis.print_results` method. The
results is printed in five individual tables:

- connections
- components
- busses
- groups (component groups)
- network

By default, all of these tables are printed to the prompt. It is possible to
deselect the tables, e.g. by passing :code:`groups=False` to the method call.

.. code-block:: python

    ean.print_results(groups=False, connections=False)

For the component related tables, i.e. busses, components and groups, the data
are sorted descending regarding the exergy destruction value of the individual
component.

Accessing the data
^^^^^^^^^^^^^^^^^^
The underlying data for the tabular printouts are stored in
`pandas DataFrames <https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html>`_.
Therefore, you can easily access and process these data. To access these use
the following code snippet.

.. code-block:: python

    connection_data = ean.connection_data
    bus_data = ean.bus_data
    component_data = ean.component_data
    network_data = ean.network_data
    group_data = ean.group_data

Lastly, the analysis also provides an input data generator for plotly's
`sankey diagram <https://plotly.com/python/sankey-diagram/>`_.

Plotting
^^^^^^^^
To use the plotly library, you'll need to install it first. Please check the
respective documentation on plotly's documentation. Generating a Grassmann
diagram is then easily performed:

.. code-block:: python

    import plotly.graph_objects as go

    links, nodes = ean.generate_plotly_sankey_input()

    fig = go.Figure(go.Sankey(
        arrangement='snap',
        node={
            'label': nodes,
            'pad':11,
            'color': 'orange'},
        link=links))
    fig.show()

.. figure:: api/_images/placeholder.svg
    :align: center
    :alt: Grassmann diagram of the Soler Energy Generating System (SEGS)

The :py:meth:`tespy.tools.analyses.ExergyAnalysis.generate_plotly_sankey_input`
method provides the links and the corresponding nodes for the diagram. Colors
and node order are assigned automatically but can be changed. Additionally, a
threshold value for the minimum value of an exergy stream can be specified to
exclude relatively small values from display.

.. code-block:: python

    ean.generate_plotly_sankey_input(
        node_order=[
            'E_F', 'heat input', 'SF', 'SG', 'LPT', 'RH', 'HPT',
            'total output power', 'CW', 'LPP', 'FWP', 'HPP', 'exergy loss',
            'E_L', 'E_P', 'E_D'
        ],
        colors={'E_F': 'rgba(100, 100, 100, 0.5)'},
        display_thresold=1)

The coloring of the links is defined by the type of the exergy stream (bound
to a specific fluid, fuel exergy, product exergy, exergy loss, exergy
destruction or internal exergy streams not bound to mass flows). Therefore
colors can be assigned to these types of streams.

.. note::

    - The :code:`node_order` must contain all exergy streams, thus including

      - ALL component group labels
      - lables of the busses used in the definitions of the analysis
      - :code:`'E_F'`, :code:`'E_P'`, :code:`'E_D'`, :code:`'E_L'`

    - The colors dictionary works with the following keys:

      - :code:`'E_F'`, :code:`'E_P'`, :code:`'E_D'`, :code:`'E_L'`
      - all labels of the busses used in the definition of the internal exergy
        streams
      - all names of the network's fluid
      - :code:`'mix'` for any mixture of two or more fluids

    - Keys missing in the dictionary will automatically assign a color to the
      link.
    - The respective value are strings representing colors in the RGBA format,
      e.g. :code:`'rgba(100, 100, 100, 0.5)'`.

The underlying exergy stream data is saved in a dictionary, if you want to
handle the data by yourself.

.. code-block:: python

    sankey_data = ean.sankey_data
