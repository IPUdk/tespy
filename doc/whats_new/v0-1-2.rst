v0.1.2 (July, some day, 2019)
+++++++++++++++++++++++++++++

New Features
############
- The water electrolyzer is available as new component of TESPy (`PR #73 <https://github.com/oemof/tespy/pull/73>`_).

Documentation
#############
- Fix some typos in the docstrings and improvements of default values (`PR #69 <https://github.com/oemof/tespy/pull/69>`_ and `PR #71 <https://github.com/oemof/tespy/pull/71>`_).

Parameter renaming
##################

Testing
#######

Bug fixes
#########
- Fix convergence check for negative minimum enthalpy values (`PR #71 <https://github.com/oemof/tespy/pull/71>`_).

Other changes
#############
- Add method to calculate and export vapour mass fraction values of pure fluids in the post processing (`PR #74 <https://github.com/oemof/tespy/pull/74>`_).
- Only allow label and P as parameters for busses to avoid misleading parameter specification (`PR #78 <https://github.com/oemof/tespy/pull/78>`_).
  
.. _whats_new_012_example_label:

Water Electrolyzer Example
##########################

.. code-block:: python

	from tespy import cmp, con, nwk
	import numpy as np

	# network
	fluid_list = ['NH3', 'water']
	nw = nwk.network(fluids=fluid_list, T_unit='C', p_unit='bar', h_unit='kJ / kg')

	# components
	tesin = cmp.sink('TES in')
	tesout = cmp.source('TES out')
	hsin = cmp.sink('HS in')
	hsout = cmp.source('HS out')
	he = cmp.heat_exchanger('heat exchanger')

	# connection
	tes_he = con.connection(tesout, 'out1', he, 'in2')
	he_tes = con.connection(he, 'out2', tesin, 'in1')
	hs_he = con.connection(hsout, 'out1', he, 'in1')
	he_hs = con.connection(he, 'out1', hsin, 'in1')
	nw.add_conns(tes_he, he_tes, hs_he, he_hs)

	# heat exchanger parameters
	he.set_attr(pr1=0.98, pr2=0.98, ttd_u=42, Q=-90e3)

	# hot side parameters
	hs_he.set_attr(T=70, p=9.4, fluid={'NH3': 1, 'water': 0})
	he_hs.set_attr(T=35)

	# cold side inlet
	tes_he.set_attr(T=18, p=5, fluid={'NH3': 0, 'water': 1})

	# solve
	nw.solve('design')

	fill = '############################################################'

	print(fill)
	print('See, the calculation did not work: The temperature value for the '
		  'hot side outlet is near to the two phase region. A singularity '
		  'appears in the solution process, as the temperature equation\'s '
		  'derivative towards enthalpy will be zero in this region.')
	print(fill)

	## let's retry with state keyword (state should be gaseous)
	he_hs.set_attr(state='g')

	nw.solve('design')
	nw.print_results()

	print(fill)
	print('The state keyword prevents the fluids state at the hot side outlet '
		  'from going into two phase region, a solution is found.')
	print(fill)

	# so how does the superheating or subcooling work?
	# remove state and temperature specification, add superheating specification
	# temperature difference to boiling point = 10 K
	he_hs.set_attr(state=np.nan, T=np.nan, Td_bp=10)
	nw.solve('design')
	nw.print_results()

	print(fill)
	print('The temperature at hot side outlet is 10 K above the (prior) unkown '
		  'boiling point temperature at that point.')
	print(fill)


Contributors
############

- Francesco Witte
- Tim Hoener, Nils Stolze, Markus Brandt
