v0.3.0 - Someversion (somemonth, someday, 2020)
+++++++++++++++++++++++++++++++++++++++++++++++

New Features
############
- Make entropy and specific volume available after simulation. Additionally,
  the method :py:meth:`tespy.connections.connection.get_fluid_properties` may
  be used, to return the full fluids state of a connection: Pressure,
  specific enthalpy, temperature, specific volume, specific entropy and
  vapor mass fraction (`PR #172 <https://github.com/oemof/tespy/pull/172>`_).
- Connections, components and busses are now easily accessible on every
  network. Connections now have a label, which can be specified individually,
  the default value of the label is given by the following logic.
  :code:`source:source_id_target:target_id`, where source and target are the
  labels of the connected components.

  Access the objects with:

  - mynetwork.busses['mybuslabel']
  - mynetwork.components['mycomponentlabel']
  - mynetwork.connections['myconnectionlabel']

  (`PR #173 <https://github.com/oemof/tespy/pull/173>`_)
- Specification of the CoolProp back end is now possible. You can specify the
  back end by adding it in front of the fluid's name on creating a network, for
  example:

  .. code-block:: python

      from tespy.networks import network
      fluid_list = ['air', 'BICUBIC::water', 'INCOMP::DowQ']
      network(fluids=fluid_list)

  If you do not specify a back end :code:`HEOS` will be applied (as for
  :code:`air` in this example). This has been the case until now as well, thus
  no further changes are required to match an 0.2.x application to the
  0.3.x API. For all back ends available please refer to the
  :ref:`fluid properties section <tespy_fluid_properties_label>`. To specify
  the fluid vector on a connection leave out the back end specification, e. g.:

  .. code-block:: python3

      myconnection.set_attr(fluid={'DowQ': 1, 'water': 0, 'air': 0})

  (`PR #174 <https://github.com/oemof/tespy/pull/174>`_).

- Unsetting a value is now also possible using :code:`None` instead of
  :code:`np.nan` (`PR #178 <https://github.com/oemof/tespy/pull/178>`_).



Documentation
#############
- Documentation has been updated according to the API-changes.
- Fixed many typos on the online-documentation.

Parameter renaming
##################

Testing
#######
- Move from nose to pytest
  (`PR #165 <https://github.com/oemof/tespy/pull/165>`_).
- Add fluid property test for a mixture of a tespy_fluid with a third
  fluid and a mixture of the same individual fluids
  (`PR #174 <https://github.com/oemof/tespy/pull/174>`_).
- Add a gasturbine model test for comparison of the stoichiometric combustion
  chamber with the standard combustion chamber
  (`PR #174 <https://github.com/oemof/tespy/pull/174>`_).

Bug fixes
#########
- Increase the number of support points for tespy_fluid tabular data creation
  in order to lift accuracy to a more acceptable value
  (`PR #174 <https://github.com/oemof/tespy/pull/174>`_).

Other changes
#############
- Improve naming in networks, components and connections modules
  (`PR #172 <https://github.com/oemof/tespy/pull/172>`_,
   `PR #175 <https://github.com/oemof/tespy/pull/175>`_).

Changes in the API
##################
The changes affect

- reading design point information from the :code:`design_path`.
- reading starting value information from the :code:`init_path`
- and loading networks with the network reader's
  :py:meth:`tespy.networks.network_reader.load_network` method.

Data generated in older versions of TESPy can not be imported. In order to fix
this follow the steps below.

- rename the :code:`comps` folder to :code:`components`
- rename the :code:`conns.csv` file to :code:`connections.csv`

and within the file rename the columns

- :code:`s` to :code:`source`
- :code:`s_id` to :code:`source_id`
- :code:`t` to :code:`target`
- :code:`t_id` to :code:`target_id`

If you want to use the network reader,

- create a :code:`network.json` file.
- add the desired contents as listed below.

The fluids are represented in a dictionary containing the fluid's names as keys
and the CoolProp back end as value. :code:`"HEOS"` is the default back end,
which has been used until version 0.2.x in TESPy.

.. code-block:: json

    {
        "fluids":
        {
            "CO2": "TTSE",
            "O2": "HEOS",
            "N2": "BICUBIC",
        },
        "T_unit": "C",
        "h_unit": "kJ / kg",
        "m_unit": "kg / s",
        "T_range": [150, 200]
    }

Due to the addition of the CoolProp back end selection the
:py:class:`tespy.components.combustion.combustion_chamber_stoich` API changed
as well. Please refer to the
:ref:`combustion chamber tutorial<combustion_chamber_tutorial_label>` for the
new implementation.

If you are having trouble applying these changes, you are welcome to open an
issue on our `github repository <https://github.com/oemof/tespy/issues>`_.

Contributors
############
- Francesco Witte (`@fwitte <https://github.com/fwitte>`_)
